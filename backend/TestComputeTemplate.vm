  @Test
  public final void testCompute() {
    try {
      Vertex<$vertexIdType, $vertexValueType, $edgeValueType> vertex = conf.createVertex();
      vertex.initialize($helper.formatWritable($vertexId), $helper.formatWritable($vertexValue));
      
#if ($neighbors)
      ReusableEdge<$vertexIdType, $edgeValueType> edge = conf.createReusableEdge();
#foreach ($neighbor in $neighbors)
      edge.setTargetVertexId($helper.formatWritable($neighbor.NbrId));
      edge.setValue($helper.formatWritable($neighbor.edgeValue));
      vertex.addEdge(edge);
#end
#end

      ArrayList<$inMsgType> inMsgs = new ArrayList<>();
#foreach ($inMsg in $inMsgs)
      inMsgs.add($helper.formatWritable($inMsg));   
#end

      classUnderTest.compute(vertex, inMsgs);

      // assertEquals(, vertex.getValue().get(), 0.001f);

      // mockEnv.verifyNoMessageSent();

      // $vertexValueType outMessage = new $outMsgType();
      // mockEnv.verifyMessageSentToAllEdges(vertex, outMessage);

      // $vertexValueType outMessage = new $outMsgType();
      // mockEnv.verifyMessageSent($helper.formatWritable($vertexId), outMessage);
    } catch (IOException e) {
      e.printStackTrace();
    }
  }