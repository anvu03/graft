  @Before
  public void setUp() throws Exception {
    GiraphConfiguration config = new GiraphConfiguration();
    config.setComputationClass($classUnderTestName#[[.class]]#);
    GiraphConfiguration.VERTEX_ID_CLASS.set(config, $vertexIdType#[[.class]]#);
    GiraphConfiguration.VERTEX_VALUE_CLASS.set(config, $vertexValueType#[[.class]]#);
    GiraphConfiguration.EDGE_VALUE_CLASS.set(config, $edgeValueType#[[.class]]#);
    GiraphConfiguration.INCOMING_MESSAGE_VALUE_CLASS.set(config, $inMsgType#[[.class]]#);
    GiraphConfiguration.OUTGOING_MESSAGE_VALUE_CLASS.set(config, $outMsgType#[[.class]]#);
#foreach( $config in $configs )
    config.set#evaluate($config.classStr)("$config.key", $helper.format($config.value));
#end
    conf = new ImmutableClassesGiraphConfiguration<>(config);

    classUnderTest = ($classUnderTestName) conf.createComputation();

    mockEnv = new MockedEnvironment<>();
    GraphState graphState = mockEnv.getGraphState();
    when(graphState.getSuperstep()).thenReturn($superstepNo#[[l]]#);
    when(graphState.getTotalNumVertices()).thenReturn($nVertices#[[l]]#);
    when(graphState.getTotalNumEdges()).thenReturn($nEdges#[[l]]#);

    processor = mockEnv.getWorkerClientRequestProcessor();

    WorkerAggregatorUsage aggr = mock(WorkerAggregatorUsage.class);
#foreach ($aggr in $aggregators)
    when(aggr.getAggregatedValue("$aggr.key")).thenReturn($helper.formatWritable($aggr.value));
#end

    classUnderTest.initialize(graphState, processor, null, aggr, null);
        
  }