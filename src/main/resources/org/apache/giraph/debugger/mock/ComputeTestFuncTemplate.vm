  @Test
  public final void testCompute() {
    try {
      $classUnderTestName classUnderTest = ($classUnderTestName) conf.createComputation();

      GraphState graphState = mock(GraphState.class);
      when(graphState.getSuperstep()).thenReturn($superstepNo#[[l]]#);
      when(graphState.getTotalNumVertices()).thenReturn(15012200L);
      when(graphState.getTotalNumEdges()).thenReturn(82003004L);
	
      WorkerClientRequestProcessor<$vertexIdType, $vertexValueType, $edgeValueType> processor = 
          mock(WorkerClientRequestProcessor.class);
	
      WorkerGlobalCommUsage globalUsage = mock(WorkerGlobalCommUsage.class);
#foreach ($aggr in $aggregators)
      when(globalUsage.getBroadcast("$aggr.key")).thenReturn($helper.formatAggregatorBroadcast($aggr.value));
#end

      classUnderTest.initialize(graphState, processor, null, globalUsage, null);
    
      Vertex<$vertexIdType, $vertexValueType, $edgeValueType> vertex = conf.createVertex();
      vertex.initialize($helper.formatWritable($vertexId), $helper.formatWritable($vertexValue));
      
#if ($neighbors)
      ReusableEdge<$vertexIdType, $edgeValueType> edge = conf.createReusableEdge();
#foreach ($neighbor in $neighbors)
      edge.setTargetVertexId($helper.formatWritable($neighbor.NbrId));
#if ($neighbor.edgeValue)
      edge.setValue($helper.formatWritable($neighbor.edgeValue));
#end
      vertex.addEdge(edge);
#end
#end

      ArrayList<$inMsgType> inMsgs = new ArrayList<>();
#foreach ($inMsg in $inMsgs)
      inMsgs.add($helper.formatWritable($inMsg));   
#end

      classUnderTest.compute(vertex, inMsgs);      
    } catch (IOException e) {
      e.printStackTrace();
    }
  }